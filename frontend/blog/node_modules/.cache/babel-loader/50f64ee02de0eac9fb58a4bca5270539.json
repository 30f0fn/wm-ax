{"ast":null,"code":"// import qs from 'qs';\nimport { settings, api } from '../settings.js';\nconst API_URL = settings.API_URL;\nlet FetcherClass = class {\n  fetchData(query_data = {}) {\n    const rel_path = this.props.location.pathname;\n    const qs = this.props.location.search;\n    const query_string = new URLSearchParams(qs).toString();\n    const url = `${API_URL}${rel_path}?${query_string}`;\n    api.get(url).then(result => this.setState(result.data)).catch(error => this.setState({\n      error\n    }));\n  }\n\n  fetchMoreData(field, chunk_size) {\n    const rel_path_raw = this.props.location.pathname;\n    const rel_path = rel_path_raw == \"/\" ? \"\" : rel_path_raw;\n    const qs = this.props.location.search;\n    const existing_query = new URLSearchParams(qs).toString();\n    const lo = this.state[field].length;\n    const page_query = `field=${field}&from=${lo}&num=${chunk_size}`;\n\n    const extend = new_data => (state, props) => ({\n      [field]: [...this.state[field], ...new_data]\n    });\n\n    const url = `${API_URL}${rel_path}/more?${existing_query}&${page_query}`;\n    api.get(url).then(result => this.setState(extend(result['data'][field]))).catch(error => this.setState({\n      error\n    }));\n  }\n\n};\nconst Fetchers = new FetcherClass();\nexport default Fetchers;","map":{"version":3,"sources":["/home/mw/cs/blog/frontend/blog/src/utilities/fetchers.js"],"names":["settings","api","API_URL","FetcherClass","fetchData","query_data","rel_path","props","location","pathname","qs","search","query_string","URLSearchParams","toString","url","get","then","result","setState","data","catch","error","fetchMoreData","field","chunk_size","rel_path_raw","existing_query","lo","state","length","page_query","extend","new_data","Fetchers"],"mappings":"AAAA;AAEA,SAAQA,QAAR,EAAkBC,GAAlB,QAA4B,gBAA5B;AAEA,MAAMC,OAAO,GAAGF,QAAQ,CAACE,OAAzB;AAEA,IAAIC,YAAY,GAAG,MAAM;AAErBC,EAAAA,SAAS,CAACC,UAAU,GAAG,EAAd,EAAmB;AACxB,UAAMC,QAAQ,GAAG,KAAKC,KAAL,CAAWC,QAAX,CAAoBC,QAArC;AACA,UAAMC,EAAE,GAAG,KAAKH,KAAL,CAAWC,QAAX,CAAoBG,MAA/B;AACA,UAAMC,YAAY,GAAI,IAAIC,eAAJ,CAAoBH,EAApB,CAAD,CAA0BI,QAA1B,EAArB;AACA,UAAMC,GAAG,GAAI,GAAEb,OAAQ,GAAEI,QAAS,IAAGM,YAAa,EAAlD;AACAX,IAAAA,GAAG,CAACe,GAAJ,CAAQD,GAAR,EACKE,IADL,CACUC,MAAM,IAAI,KAAKC,QAAL,CAAcD,MAAM,CAACE,IAArB,CADpB,EAEKC,KAFL,CAEWC,KAAK,IAAI,KAAKH,QAAL,CAAc;AAAEG,MAAAA;AAAF,KAAd,CAFpB;AAGH;;AAEDC,EAAAA,aAAa,CAACC,KAAD,EAAQC,UAAR,EAAoB;AAC7B,UAAMC,YAAY,GAAG,KAAKnB,KAAL,CAAWC,QAAX,CAAoBC,QAAzC;AACA,UAAMH,QAAQ,GAAGoB,YAAY,IAAI,GAAhB,GAAsB,EAAtB,GAA2BA,YAA5C;AACA,UAAMhB,EAAE,GAAG,KAAKH,KAAL,CAAWC,QAAX,CAAoBG,MAA/B;AACA,UAAMgB,cAAc,GAAI,IAAId,eAAJ,CAAoBH,EAApB,CAAD,CAA0BI,QAA1B,EAAvB;AACA,UAAMc,EAAE,GAAG,KAAKC,KAAL,CAAWL,KAAX,EAAkBM,MAA7B;AACA,UAAMC,UAAU,GAAI,SAAQP,KAAM,SAAQI,EAAG,QAAOH,UAAW,EAA/D;;AACA,UAAMO,MAAM,GAAGC,QAAQ,IAAI,CAACJ,KAAD,EAAQtB,KAAR,MACpB;AAAC,OAACiB,KAAD,GAAU,CAAC,GAAG,KAAKK,KAAL,CAAWL,KAAX,CAAJ,EACC,GAAGS,QADJ;AAAX,KADoB,CAA3B;;AAGA,UAAMlB,GAAG,GAAI,GAAEb,OAAQ,GAAEI,QAAS,SAAQqB,cAAe,IAAGI,UAAW,EAAvE;AACA9B,IAAAA,GAAG,CAACe,GAAJ,CAAQD,GAAR,EACKE,IADL,CACUC,MAAM,IAAI,KAAKC,QAAL,CAAca,MAAM,CAACd,MAAM,CAAC,MAAD,CAAN,CAAeM,KAAf,CAAD,CAApB,CADpB,EAEKH,KAFL,CAEWC,KAAK,IAAI,KAAKH,QAAL,CAAc;AAAEG,MAAAA;AAAF,KAAd,CAFpB;AAGH;;AA1BoB,CAAzB;AA+BA,MAAMY,QAAQ,GAAG,IAAI/B,YAAJ,EAAjB;AAEA,eAAe+B,QAAf","sourcesContent":["// import qs from 'qs';\n\nimport {settings, api} from '../settings.js';\n\nconst API_URL = settings.API_URL;\n\nlet FetcherClass = class {\n\n    fetchData(query_data = {})  {\n        const rel_path = this.props.location.pathname;\n        const qs = this.props.location.search;\n        const query_string = (new URLSearchParams(qs)).toString();\n        const url = `${API_URL}${rel_path}?${query_string}`;\n        api.get(url)\n            .then(result => this.setState(result.data))\n            .catch(error => this.setState({ error }));\n    }\n\n    fetchMoreData(field, chunk_size) {\n        const rel_path_raw = this.props.location.pathname;\n        const rel_path = rel_path_raw == \"/\" ? \"\" : rel_path_raw;\n        const qs = this.props.location.search;\n        const existing_query = (new URLSearchParams(qs)).toString();\n        const lo = this.state[field].length;\n        const page_query = `field=${field}&from=${lo}&num=${chunk_size}`;\n        const extend = new_data => (state, props) =>\n              ({[field] : [...this.state[field],\n                           ...new_data]});\n        const url = `${API_URL}${rel_path}/more?${existing_query}&${page_query}`;\n        api.get(url)\n            .then(result => this.setState(extend(result['data'][field])))\n            .catch(error => this.setState({ error }));\n    }\n\n}\n\n\nconst Fetchers = new FetcherClass();\n\nexport default Fetchers;\n"]},"metadata":{},"sourceType":"module"}